@isTest 
private class TestOppInvoicedCreateCase {
 static testMethod void validateCase() 
 {
     Test.StartTest();
                    Test_SharedNewAccount.createAccount('Test Account');
    
        // Test Creation of the Shared Account
        Account acct = [SELECT Id FROM Account WHERE Name = 'Test Account' LIMIT 1];
        System.Assert(acct != null, 'TestAmazonSNS.validateAmazonSNS FAIL: Account was not inserted properly!');
        
                //Create a Contact'
        Contact contact = new Contact(ACCOUNTID = acct.Id, FIRSTNAME = 'Test',LASTNAME = 'Contact',EMAIL = 'test.contact@nwea.org');
        insert contact;
     system.debug('Insert Contact' + contact.id); 
     
            System.Assert(contact != null, 'TestAmazonSNS.validateAmazonSNS FAIL: Contact was not inserted properly!');

         Product2 prod2= new Product2(Name = 'Test Product - OneTime',
                                     Component_1__c = 'SKN',
                                     Description = 'Test Product',
                                     IsActive = true);
        insert prod2;
        Id pricebookId = Test.getStandardPricebookId();
        PricebookEntry pbEntry = new PricebookEntry(Pricebook2Id = pricebookId,
                                                    product2Id = prod2.Id,
                                                    isActive = true,
                                                    UnitPrice = 1000);
        insert pbEntry;

        Opportunity Op = new Opportunity(ACCOUNTID = acct.Id, Name = 'TestOp',Anticipatged_1st_Test_Season__c = 'Fall 2017',ForecastCategoryName = 'Prospect & Discovery',Closed_Won_Reason__c = 'Relationships', Closed_Won_Detail__c = 'Relationship with Influencer', Region__c = 'East Enrollments' , Type = 'Enrollment',Test_Alignment_Option__c = 'Other (Specify in Notes)' , StageName = 'Prospect', License_Start_Date__c = date.newInstance(2018,03,01), License_End_Date__c = date.newInstance(2018,03,31), CloseDate = Date.newInstance(2018,03,30), MAP_Growth_MAP_Skills_Implementation__c = 'Standard');
        insert Op;
        system.debug('Insert opportunity' + Op.id);  
        
        OpportunityLineItem OLI = new OpportunityLineItem(OpportunityId = Op.Id, PricebookEntryId = pbEntry.Id ,Product2Id = prod2.Id, TotalPrice = 10 , Quantity = 1, Imp_Needed__c ='Yes');
        insert OLI;
     
     
        Op.StageName = 'Closed Won';
        Op.Implementation_Contact__c = contact.id;
        Op.Closed_Won_Reason__c = 'Relationships';
        Op.Closed_Won_Detail__c = 'Relationship with Influencer';
        checkRecursive.resetRunOnceFlag(); 
        update Op;   
        
        Op.Finance_Stage__c = 'Invoiced';
        checkRecursive.resetRunOnceFlag();
        Update Op;
     system.debug('Update opportunity' + Op.Finance_Stage__c); 

        Case cs =[SELECT Id, Sub_category__c FROM Case WHERE Opportunity__c = :Op.Id LIMIT 1];
        System.assert(cs.Sub_Category__c == 'Skills Navigator');
     
     Test.stopTest();
 }
    
     static testMethod void validateCase2() 
 {
     Test.StartTest();
                    Test_SharedNewAccount.createAccount('Test Account');
    
        // Test Creation of the Shared Account
        Account acct = [SELECT Id FROM Account WHERE Name = 'Test Account' LIMIT 1];
        System.Assert(acct != null, 'TestAmazonSNS.validateAmazonSNS FAIL: Account was not inserted properly!');
        
                //Create a Contact'
        Contact contact = new Contact(ACCOUNTID = acct.Id, FIRSTNAME = 'Test',LASTNAME = 'Contact',EMAIL = 'test.contact@nwea.org');
        insert contact;
     
     
            System.Assert(contact != null, 'TestAmazonSNS.validateAmazonSNS FAIL: Contact was not inserted properly!');

         Product2 prod2= new Product2(Name = 'Test Product - OneTime',
                                     Component_1__c = 'MRL',
                                     Description = 'Test Product',
                                     IsActive = true);
        insert prod2;
        Id pricebookId = Test.getStandardPricebookId();
        PricebookEntry pbEntry = new PricebookEntry(Pricebook2Id = pricebookId,
                                                    product2Id = prod2.Id,
                                                    isActive = true,
                                                    UnitPrice = 1000);
        insert pbEntry;

        Opportunity Op = new Opportunity(ACCOUNTID = acct.Id, Name = 'TestOp',Anticipatged_1st_Test_Season__c = 'Fall 2017',ForecastCategoryName = 'Prospect & Discovery',Closed_Won_Reason__c = 'Relationships', Closed_Won_Detail__c = 'Relationship with Influencer', Region__c = 'East Enrollments' , Type = 'Renewal',Test_Alignment_Option__c = 'Other (Specify in Notes)' , StageName = 'Prospect', License_Start_Date__c = date.newInstance(2018,03,01), License_End_Date__c = date.newInstance(2018,03,31), CloseDate = Date.newInstance(2018,03,30), MAP_Growth_MAP_Skills_Implementation__c = 'Standard');
        insert Op;
        system.debug('Insert opportunity' + Op.id);  
        
        OpportunityLineItem OLI = new OpportunityLineItem(OpportunityId = Op.Id, PricebookEntryId = pbEntry.Id ,Product2Id = prod2.Id, TotalPrice = 10 , Quantity = 1, Imp_Needed__c ='Yes');
        insert OLI;
     
     
        Op.StageName = 'Closed Won';
        Op.Implementation_Contact__c = contact.id;
        Op.Closed_Won_Reason__c = 'Relationships';
        Op.Closed_Won_Detail__c = 'Relationship with Influencer';
     checkRecursive.resetRunOnceFlag();
        update Op;   
        
        Op.Finance_Stage__c = 'Invoiced';
     checkRecursive.resetRunOnceFlag();
        Update Op;

        Case cs =[SELECT Id, Sub_category__c FROM Case WHERE Opportunity__c = :Op.Id LIMIT 1];
        System.assert(cs.Sub_Category__c == 'Web-based MAP');
     
     Test.stopTest();
 }
}
